/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RecommenderService_H
#define RecommenderService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "movies_types.h"

namespace movies {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RecommenderServiceIf {
 public:
  virtual ~RecommenderServiceIf() {}
  virtual void GetRecommendations(std::vector<std::string> & _return, const int64_t user) = 0;
};

class RecommenderServiceIfFactory {
 public:
  typedef RecommenderServiceIf Handler;

  virtual ~RecommenderServiceIfFactory() {}

  virtual RecommenderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RecommenderServiceIf* /* handler */) = 0;
};

class RecommenderServiceIfSingletonFactory : virtual public RecommenderServiceIfFactory {
 public:
  RecommenderServiceIfSingletonFactory(const ::std::shared_ptr<RecommenderServiceIf>& iface) : iface_(iface) {}
  virtual ~RecommenderServiceIfSingletonFactory() {}

  virtual RecommenderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RecommenderServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<RecommenderServiceIf> iface_;
};

class RecommenderServiceNull : virtual public RecommenderServiceIf {
 public:
  virtual ~RecommenderServiceNull() {}
  void GetRecommendations(std::vector<std::string> & /* _return */, const int64_t /* user */) {
    return;
  }
};

typedef struct _RecommenderService_GetRecommendations_args__isset {
  _RecommenderService_GetRecommendations_args__isset() : user(false) {}
  bool user :1;
} _RecommenderService_GetRecommendations_args__isset;

class RecommenderService_GetRecommendations_args {
 public:

  RecommenderService_GetRecommendations_args(const RecommenderService_GetRecommendations_args&);
  RecommenderService_GetRecommendations_args& operator=(const RecommenderService_GetRecommendations_args&);
  RecommenderService_GetRecommendations_args() : user(0) {
  }

  virtual ~RecommenderService_GetRecommendations_args() noexcept;
  int64_t user;

  _RecommenderService_GetRecommendations_args__isset __isset;

  void __set_user(const int64_t val);

  bool operator == (const RecommenderService_GetRecommendations_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_GetRecommendations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_GetRecommendations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_GetRecommendations_pargs {
 public:


  virtual ~RecommenderService_GetRecommendations_pargs() noexcept;
  const int64_t* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_GetRecommendations_result__isset {
  _RecommenderService_GetRecommendations_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _RecommenderService_GetRecommendations_result__isset;

class RecommenderService_GetRecommendations_result {
 public:

  RecommenderService_GetRecommendations_result(const RecommenderService_GetRecommendations_result&);
  RecommenderService_GetRecommendations_result& operator=(const RecommenderService_GetRecommendations_result&);
  RecommenderService_GetRecommendations_result() {
  }

  virtual ~RecommenderService_GetRecommendations_result() noexcept;
  std::vector<std::string>  success;
  ServiceException se;

  _RecommenderService_GetRecommendations_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const RecommenderService_GetRecommendations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_GetRecommendations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_GetRecommendations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_GetRecommendations_presult__isset {
  _RecommenderService_GetRecommendations_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _RecommenderService_GetRecommendations_presult__isset;

class RecommenderService_GetRecommendations_presult {
 public:


  virtual ~RecommenderService_GetRecommendations_presult() noexcept;
  std::vector<std::string> * success;
  ServiceException se;

  _RecommenderService_GetRecommendations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RecommenderServiceClient : virtual public RecommenderServiceIf {
 public:
  RecommenderServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RecommenderServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetRecommendations(std::vector<std::string> & _return, const int64_t user);
  void send_GetRecommendations(const int64_t user);
  void recv_GetRecommendations(std::vector<std::string> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RecommenderServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<RecommenderServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RecommenderServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetRecommendations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RecommenderServiceProcessor(::std::shared_ptr<RecommenderServiceIf> iface) :
    iface_(iface) {
    processMap_["GetRecommendations"] = &RecommenderServiceProcessor::process_GetRecommendations;
  }

  virtual ~RecommenderServiceProcessor() {}
};

class RecommenderServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RecommenderServiceProcessorFactory(const ::std::shared_ptr< RecommenderServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< RecommenderServiceIfFactory > handlerFactory_;
};

class RecommenderServiceMultiface : virtual public RecommenderServiceIf {
 public:
  RecommenderServiceMultiface(std::vector<std::shared_ptr<RecommenderServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RecommenderServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<RecommenderServiceIf> > ifaces_;
  RecommenderServiceMultiface() {}
  void add(::std::shared_ptr<RecommenderServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetRecommendations(std::vector<std::string> & _return, const int64_t user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRecommendations(_return, user);
    }
    ifaces_[i]->GetRecommendations(_return, user);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RecommenderServiceConcurrentClient : virtual public RecommenderServiceIf {
 public:
  RecommenderServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  RecommenderServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetRecommendations(std::vector<std::string> & _return, const int64_t user);
  int32_t send_GetRecommendations(const int64_t user);
  void recv_GetRecommendations(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
