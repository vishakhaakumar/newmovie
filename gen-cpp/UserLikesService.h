/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserLikesService_H
#define UserLikesService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "movies_types.h"

namespace movies {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserLikesServiceIf {
 public:
  virtual ~UserLikesServiceIf() {}
  virtual void GetMovieLikesByIds(std::vector<int64_t> & _return, const std::vector<std::string> & movie_ids) = 0;
  virtual void LikeDislikeMovie(const std::string& user_id, const std::string& movie_id, const bool likeDislike) = 0;
};

class UserLikesServiceIfFactory {
 public:
  typedef UserLikesServiceIf Handler;

  virtual ~UserLikesServiceIfFactory() {}

  virtual UserLikesServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserLikesServiceIf* /* handler */) = 0;
};

class UserLikesServiceIfSingletonFactory : virtual public UserLikesServiceIfFactory {
 public:
  UserLikesServiceIfSingletonFactory(const ::std::shared_ptr<UserLikesServiceIf>& iface) : iface_(iface) {}
  virtual ~UserLikesServiceIfSingletonFactory() {}

  virtual UserLikesServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserLikesServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<UserLikesServiceIf> iface_;
};

class UserLikesServiceNull : virtual public UserLikesServiceIf {
 public:
  virtual ~UserLikesServiceNull() {}
  void GetMovieLikesByIds(std::vector<int64_t> & /* _return */, const std::vector<std::string> & /* movie_ids */) {
    return;
  }
  void LikeDislikeMovie(const std::string& /* user_id */, const std::string& /* movie_id */, const bool /* likeDislike */) {
    return;
  }
};

typedef struct _UserLikesService_GetMovieLikesByIds_args__isset {
  _UserLikesService_GetMovieLikesByIds_args__isset() : movie_ids(false) {}
  bool movie_ids :1;
} _UserLikesService_GetMovieLikesByIds_args__isset;

class UserLikesService_GetMovieLikesByIds_args {
 public:

  UserLikesService_GetMovieLikesByIds_args(const UserLikesService_GetMovieLikesByIds_args&);
  UserLikesService_GetMovieLikesByIds_args& operator=(const UserLikesService_GetMovieLikesByIds_args&);
  UserLikesService_GetMovieLikesByIds_args() {
  }

  virtual ~UserLikesService_GetMovieLikesByIds_args() noexcept;
  std::vector<std::string>  movie_ids;

  _UserLikesService_GetMovieLikesByIds_args__isset __isset;

  void __set_movie_ids(const std::vector<std::string> & val);

  bool operator == (const UserLikesService_GetMovieLikesByIds_args & rhs) const
  {
    if (!(movie_ids == rhs.movie_ids))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetMovieLikesByIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetMovieLikesByIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_GetMovieLikesByIds_pargs {
 public:


  virtual ~UserLikesService_GetMovieLikesByIds_pargs() noexcept;
  const std::vector<std::string> * movie_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetMovieLikesByIds_result__isset {
  _UserLikesService_GetMovieLikesByIds_result__isset() : success(false) {}
  bool success :1;
} _UserLikesService_GetMovieLikesByIds_result__isset;

class UserLikesService_GetMovieLikesByIds_result {
 public:

  UserLikesService_GetMovieLikesByIds_result(const UserLikesService_GetMovieLikesByIds_result&);
  UserLikesService_GetMovieLikesByIds_result& operator=(const UserLikesService_GetMovieLikesByIds_result&);
  UserLikesService_GetMovieLikesByIds_result() {
  }

  virtual ~UserLikesService_GetMovieLikesByIds_result() noexcept;
  std::vector<int64_t>  success;

  _UserLikesService_GetMovieLikesByIds_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const UserLikesService_GetMovieLikesByIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetMovieLikesByIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetMovieLikesByIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetMovieLikesByIds_presult__isset {
  _UserLikesService_GetMovieLikesByIds_presult__isset() : success(false) {}
  bool success :1;
} _UserLikesService_GetMovieLikesByIds_presult__isset;

class UserLikesService_GetMovieLikesByIds_presult {
 public:


  virtual ~UserLikesService_GetMovieLikesByIds_presult() noexcept;
  std::vector<int64_t> * success;

  _UserLikesService_GetMovieLikesByIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserLikesService_LikeDislikeMovie_args__isset {
  _UserLikesService_LikeDislikeMovie_args__isset() : user_id(false), movie_id(false), likeDislike(false) {}
  bool user_id :1;
  bool movie_id :1;
  bool likeDislike :1;
} _UserLikesService_LikeDislikeMovie_args__isset;

class UserLikesService_LikeDislikeMovie_args {
 public:

  UserLikesService_LikeDislikeMovie_args(const UserLikesService_LikeDislikeMovie_args&);
  UserLikesService_LikeDislikeMovie_args& operator=(const UserLikesService_LikeDislikeMovie_args&);
  UserLikesService_LikeDislikeMovie_args() : user_id(), movie_id(), likeDislike(0) {
  }

  virtual ~UserLikesService_LikeDislikeMovie_args() noexcept;
  std::string user_id;
  std::string movie_id;
  bool likeDislike;

  _UserLikesService_LikeDislikeMovie_args__isset __isset;

  void __set_user_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_likeDislike(const bool val);

  bool operator == (const UserLikesService_LikeDislikeMovie_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(likeDislike == rhs.likeDislike))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_LikeDislikeMovie_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_LikeDislikeMovie_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_LikeDislikeMovie_pargs {
 public:


  virtual ~UserLikesService_LikeDislikeMovie_pargs() noexcept;
  const std::string* user_id;
  const std::string* movie_id;
  const bool* likeDislike;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_LikeDislikeMovie_result {
 public:

  UserLikesService_LikeDislikeMovie_result(const UserLikesService_LikeDislikeMovie_result&);
  UserLikesService_LikeDislikeMovie_result& operator=(const UserLikesService_LikeDislikeMovie_result&);
  UserLikesService_LikeDislikeMovie_result() {
  }

  virtual ~UserLikesService_LikeDislikeMovie_result() noexcept;

  bool operator == (const UserLikesService_LikeDislikeMovie_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserLikesService_LikeDislikeMovie_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_LikeDislikeMovie_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_LikeDislikeMovie_presult {
 public:


  virtual ~UserLikesService_LikeDislikeMovie_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserLikesServiceClient : virtual public UserLikesServiceIf {
 public:
  UserLikesServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserLikesServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetMovieLikesByIds(std::vector<int64_t> & _return, const std::vector<std::string> & movie_ids);
  void send_GetMovieLikesByIds(const std::vector<std::string> & movie_ids);
  void recv_GetMovieLikesByIds(std::vector<int64_t> & _return);
  void LikeDislikeMovie(const std::string& user_id, const std::string& movie_id, const bool likeDislike);
  void send_LikeDislikeMovie(const std::string& user_id, const std::string& movie_id, const bool likeDislike);
  void recv_LikeDislikeMovie();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserLikesServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserLikesServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserLikesServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetMovieLikesByIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LikeDislikeMovie(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserLikesServiceProcessor(::std::shared_ptr<UserLikesServiceIf> iface) :
    iface_(iface) {
    processMap_["GetMovieLikesByIds"] = &UserLikesServiceProcessor::process_GetMovieLikesByIds;
    processMap_["LikeDislikeMovie"] = &UserLikesServiceProcessor::process_LikeDislikeMovie;
  }

  virtual ~UserLikesServiceProcessor() {}
};

class UserLikesServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserLikesServiceProcessorFactory(const ::std::shared_ptr< UserLikesServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< UserLikesServiceIfFactory > handlerFactory_;
};

class UserLikesServiceMultiface : virtual public UserLikesServiceIf {
 public:
  UserLikesServiceMultiface(std::vector<std::shared_ptr<UserLikesServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserLikesServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserLikesServiceIf> > ifaces_;
  UserLikesServiceMultiface() {}
  void add(::std::shared_ptr<UserLikesServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetMovieLikesByIds(std::vector<int64_t> & _return, const std::vector<std::string> & movie_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMovieLikesByIds(_return, movie_ids);
    }
    ifaces_[i]->GetMovieLikesByIds(_return, movie_ids);
    return;
  }

  void LikeDislikeMovie(const std::string& user_id, const std::string& movie_id, const bool likeDislike) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LikeDislikeMovie(user_id, movie_id, likeDislike);
    }
    ifaces_[i]->LikeDislikeMovie(user_id, movie_id, likeDislike);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserLikesServiceConcurrentClient : virtual public UserLikesServiceIf {
 public:
  UserLikesServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserLikesServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetMovieLikesByIds(std::vector<int64_t> & _return, const std::vector<std::string> & movie_ids);
  int32_t send_GetMovieLikesByIds(const std::vector<std::string> & movie_ids);
  void recv_GetMovieLikesByIds(std::vector<int64_t> & _return, const int32_t seqid);
  void LikeDislikeMovie(const std::string& user_id, const std::string& movie_id, const bool likeDislike);
  int32_t send_LikeDislikeMovie(const std::string& user_id, const std::string& movie_id, const bool likeDislike);
  void recv_LikeDislikeMovie(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
